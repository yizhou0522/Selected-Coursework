q()
setwd("C:/LearningR")
# objects in lists dont' need to be the same type
x<-list(10,'John',T)
x
rollno<-c(1,2,3)
snames<-c('J','B','A')
marks<-c(2.3,3.5,6.7)
students<-list(rollno,snames,marks)
students
# 同以下方式
stu=list(c(1,2,3),c('b'),c(2,3))
stu
stu[1]
stu[[1]]
# return the elt of the list
stu[[1]][2]
# return the elt of the list
stu[[1]][2]<-90
stu
# 同以下方式
stu=list('id'=c(1,2,3),'name'=c('b'),'scores'=c(2,3))
stu$id
stu$scores
stu[c(1,3)]
stu[c(id,scores)]
stu[c('id','scores')]
students<-c(students,stu)
students
id<-c(1,2,3)
marks<-c(3.4,5.6,7.0)
students<-data.frame(id,name,marks)
id<-c(1,2,3)
students<-data.frame(id,name,marks)
name<-c('b','a','c')
students<-data.frame(id,name,marks)
students
# slists<-list()注意观察dataframe和list之间区别
students[2,]
students[2:3,]
# 获取元素方式同matrix
students[2]
students
students[[3]][1]
students[[3]]
students[[3,]]
# 这里注意，这是以col为单位组成dataframe,这里获取的是col
students[[3]][1]#获取col后取col里的第一个元素
students$marks
students$marks[3]
report<-subset(students,marks>4)
report
report<-subset(students,marks>4&id<2)
report
report<-subset(students,marks>4&id<3)
report
report<-subset(students,marks>4&id<3,select=c(name))
report
# 有点像select from where
students
report<-subset(students,marks>4&id<3,select=c(name,marks))
report
report<-subset(students,marks>4&id<3,select=-name)
report
students<-rbind(students,data.frame(id=104,name='l',marks=3.0))
students
stutable<-edit(students)
stutable
#############################missingdata################
x<-c(10,3,NA,9)
x
is.na(x)
is.nan(x)
#############################missingdata################
x<-c(10,3,NA,9,NaN)
is.na(x)
is.nan(x)
# not available, NA
# not a number, NaN
y<-is.na(x)
y
x[!y]
students
students
students[[3]][2]<-NA
students
stuNA<-complete.cases(students)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
stuNA
students
students
students[[3]][2]<-NA
students
stuNA<-complete.cases(students)
stuNA
students[weatherNA,]
students[stuNA,]
mydata<-read.table('data.txt')
mydata
mydata<-read.table('data.txt',header=T)
# abs path needed
mydata
mydata<-read.table('data.txt')
# abs path needed
mydata
mydata<-read.table('data.txt',header=T,nrows=5)
# abs path needed
mydata
mydata<-read.table('data.txt',header=T,skip=3)
data
data<-read.table('data.txt',header=T)
data
mydata
mydata<-read.csv('sample.csv')
mydata
# read data from internet
url.show('http://softlect.in/datasets/sbuxPrices.csv')
mydata<-read.table('http://softlect.in/datasets/sbuxPrices.csv',sep=',',head=T)
mydata
# read data from ctrl-c
mydata<-read.table('clipboard')
mydata
# write dataframe to csv file
write.csv(students,file='output.csv')
install.packages('dplyr')
library(dplyr)
mydata<-read.csv('murders.csv')
mydata
dim(mydata)
str(mydata)
# display the structure of the data
mydata[c(1,4,6)]
# return the col
mydata[c(state,population, murders)]
# return the col
mydata[c("state","population", "murders")]
names(mydata)
subdata<-select(mydata,state:population)
subdata
subdata<-select(mydata,-c(abb,region))
subdata
subdata<-filter(mydata,murders>100)
subdata
subdatamurders
subdatamurders<-select(subdata,state,murders)
subdatamurders
subdata
subdata<-arrange(mydata,murders)
subdata
head(subdata,5)
tail(subdata,5)
subdata<-arrange(mydata,desc(murders))
subdata
names(mydata)
mydata<-rename(mydata,abb<-abbr.)
mydata<-rename(mydata,abb<-abbr)
mydata<-rename(mydata,abb=abbr)
mydata<-rename(mydata,abbr=abb)
names(mydata)
mydata<-rename(mydata,abbr《-abb)
mydata<-rename(mydata,abbr<-abb)
mydata<-rename(mydata,abbr=abb)
mydata
mydata<-read.csv('murders.csv')
mydata<-rename(mydata,abbr<-abb)
mydata<-rename(mydata,abbr=abb)
mydata<-rename(mydata,abbr=abb，homicide=murders)
mydata<-read.csv('murders.csv')
mydata<-rename(mydata,abbr=abb，homicide=murders)
# 这里重命名的方法值得注意一下，新名=旧名,而且必须用=,不能用<-,原因我不是很清楚
names(mydata)
mydata<-read.csv('murders.csv')
mydata<-mutate(mydata,ratio=murders/population)
names(mydata)
mydata<-read.csv('murders.csv')
# 自己定义并新增一列
mydata<-transmute(mydata,ratio=murders/population)
mydata
mydata<-read.csv('murders.csv')
subdata<-group_by(mydata,region)
subdata
summarise(subdata,sum(murders))
summarise(subdata,mean(murders))
#pipeline operator:简化语句
mydata<-read.csv('murders.csv')
arrange(mydata,murders)%>%select(state,murders)
library(dplyr)
mydata<-read.csv('murders.csv')
subdata<-select(mydata,state,popualtion,murders)
subdata<-select(mydata,state,population,murders)
barplot(subdata$population)
barplot(subdata$population)
barplot(subdata$population,
xlab = 'states',
ylab='populatiylab',
main='States VS Population',
names.arg = subdata$state,
col='blue'
)
sortdata<-arrange(mydata,desc(murders))
highdata<-head(sortdata,5)
sortdata<-arrange(mydata,desc(murders))
subdata<-select(sortdata,state,population,murders)
highdata<-head(sortdata,5)
barplot(subdata$murders,
xlab = 'states',
ylab='murders',
main='States VS Murders',
names.arg = highdata$state,
col='blue'
)
highdata<-head(subdata,5)
barplot(subdata$murders,
xlab = 'states',
ylab='murders',
main='States VS Murders',
names.arg = highdata$state,
col='blue'
)
barplot(highdata$murders,
xlab = 'states',
ylab='murders',
main='States VS Murders',
names.arg = highdata$state,
col='blue'
)
# stacked bar plot
mydata<-read.csv("murdersmini.csv")
changedata=mutate(mydata,popu=population/10000)
changedate=changedata[c(1,3,4)]
changedata=changedata[c(1,3,4)]
mymatrix<-data.matrix(changedata)
mymatrix
mymatrixTranspose<-t(mymatrix)
# 要获取transpose
barplot(mymatrixTranspose,
xlab = 'states',
main='States VS Population',
names.arg = subdata$state,
col=c('blue',"red"),
)
# 要获取transpose
barplot(mymatrixTranspose,
xlab = 'states',
main='States VS Population',
names.arg = subdata$state,
col=c('blue',"red")
)
mymatrix<-mydata.matrix(changedata)
# stacked bar plot
mydata<-read.csv("murdersmini.csv")
changedata=mutate(mydata,popu=population/10000)
changedata=changedata[c(1,3,4)]
mymatrix<-data.matrix(changedata)
mymatrix
mymatrixTranspose<-t(mymatrix)
# 要获取transpose
barplot(mymatrixTranspose,
xlab = 'states',
main='States VS Population',
names.arg = subdata$state,
col=c('blue',"red")
)
# 要获取transpose
barplot(mymatrixTranspose,
xlab = 'states',
main='States VS Population',
col=c('blue',"red"),
names.arg = changedata$state,
)
legend('topleft',c('pop.','murders'),fill=c('blue','red'))
# historgam
mydata<-read.csv('GEStock.csv')
subdata<-select(mydata,Date,Price)
hist(subdata$Price)
hist(subdata$Price,
xlab='Stock Price',
main="Stocks data",
col='blue',
border="red")
hist(subdata$Price,
xlab='Stock Price',
main="Stocks data",
col='blue',
border="red",
break=20)
hist(subdata$Price,
xlab='Stock Price',
main="Stocks data",
col='blue',
border="red",
breaks=20)
plot(subdata$population,subdata$murders,xlab="pop.")
# scatter plots
mydata<-read.csv('murders.csv')
subdata<-select(mydata,state,population,murders)
plot(subdata$population,subdata$murders,xlab="pop.")
plot(subdata$population,subdata$murders,xlab="pop.",ylab="murders",
main="pop vs murders",col="red")
plot(subdata$population,subdata$murders,xlab="pop.",ylab="murders",
main="pop vs murders",col="red",pch=20)
plot(subdata$population,subdata$murders,xlab="pop.",ylab="murders",
main="pop vs murders",col="red",pch=10)
# line graphs
mydata<-read.csv('murders.csv')
subdata<-select(mydata,state,population,murders)
plot(subdata$murders,type='l',
xlab='States',
ylab='murders',
main='states vs murders',
col="blue")
# box plots
mydata<-read.csv('murders.csv')
subdata<-select(mydata,state,population,murders,region)
boxplot(subdata$murders~subdata$region)
boxplot(subdata$murders~subdata$region,xlab = 'region',ylab = "murders",main="region vs murders",col="red",border="blue")
boxplot(subdata$murders~subdata$region,xlab = 'region',ylab = "murders",main="region vs murders",col="red",border="blue",notch=T)
