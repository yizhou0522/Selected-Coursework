p3b CONCLUSIONS.TXT

Complete p3b and answer the following questions using results of running
Java Flight Recorder and Java Mission Control to justify your conclusions..

1) What can you tell about the performance of your hash table implementation compared to Java's tree map? 
Explain why (or when) your hash table is better or worse than Java's Tree Map.
Hash table’s total sample count is much higher than tree map’s counterpart. This shows that hash table has greater time efficiency than tree map.

2) What did you observe in java mission control to come to the conclusion above?
I observe that java.util.TreeMap accounts for 89.06% of total sample counts and HashTable only accounts for 9.85%. In addition, TreeMap.getEntry and put methods account for far more CPU usage than hashtable‘s insert method.

3) SCREENSHOT_001.PNG NOTES: Briefly describe what this image 001 shows
The pie chart shows that the java.util.TreeMap comprises 89.07% of the total sample count, whereas the HashTable only accounts for 9.85%. This show that TreeMap class has a higher time complexity compared with HashTable.

4) SCREENSHOT_002.PNG NOTES: Briefly describe what this image 002 shows
The picture shows the hot methods of two different classes and it is clear to find that TreeMap’s insert and get methods account for 43.82% and 41.72% of the total sample count. This statistics are far larger than HashTable’s insert and get methods, which prove that HashTable’s hot methods (insert and delete) have lower time complexity.

5) Describe other screenshots if you include them in your submission.
From the screenshot_003, though it shows the memory percentage through the percentage of heap, we cannot see information related to TreeMap and HashTable. So we cannot get conclusion related to space complexity from this screenshot.
