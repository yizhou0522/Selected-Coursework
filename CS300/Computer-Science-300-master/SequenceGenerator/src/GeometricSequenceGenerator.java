

import java.util.Iterator;

/**
 * This class represents a geometric sequence generator object and this class implements Iterator
 * interface
 *
 */
public class GeometricSequenceGenerator implements Iterator<Integer> {
  private final int SIZE; // The number of elements in this sequence
  private final int INIT; // The first term in this sequence
  private final int RATIO; // The common ratio for this sequence
  private int next; // The next term in the sequence

  private int generatedCount; // The number of terms generated so far in this sequence
  // It refers also to the order of the next number to be generated by next() method



  /**
   * Creates the object of GeometricSequenceGenerator
   * 
   * @param init the initial value of the sequence
   * @param ratio the ratio between two successive terms
   * @param size is the size number of the geometric sequence
   */
  public GeometricSequenceGenerator(int init, int ratio, int size) {
    // check for the precondition: size > 0, throws an IllegalArgumentException if this precondition
    // is not satisfied
    if (size <= 0)
      throw new IllegalArgumentException(
          "WARNING: " + "CANNOT create a sequence with size <= zero.");
    // check for the validity of init (>=0) and ratio (>0), throw an IllegalArgumentException
    // if these two parameters are not valid
    if (init < 0 || ratio <= 0)
      throw new IllegalArgumentException(
          "WARNING: The starting element and the common ratio for a geometric progression should be"
              + "STRICTLY POSITIVE.");
    this.SIZE = size;
    this.INIT = init;
    this.RATIO = ratio;
    this.next = init;
    this.generatedCount = 0;
  }

  /**
   * get the value of size field
   * 
   * @return the value of SIZE
   */
  public int getSIZE() {
    return SIZE;
  }

  /**
   * get the value of INIT
   * 
   * @return the value of INIT
   */
  public int getINIT() {
    return INIT;
  }

  /**
   * get the value of RATIO
   * 
   * @return the value of ratio
   */
  public int getRATIO() {
    return RATIO;
  }

  /**
   * get the value of NEXT
   * 
   * @return the value of NEXT
   */
  public int getNext() {
    return next;
  }

  @Override
  /**
   * Checks if the iteration has a next element in this sequence
   * 
   * @return true if the current element in the iteration has a next element in this sequence, false
   *         otherwise
   */
  public boolean hasNext() {
    return generatedCount < SIZE;
    // time complexity: O(1)
  }

  /**
   * Returns the next element in this arithmetic sequence iteration with respect to the numbers
   * generated so far
   * 
   * @return the next element in this iteration
   */
  @Override
  public Integer next() {
    if (!hasNext())
      return null;
    int current = next;// store the current next value
    generatedCount++;
    next = RATIO * next;
    return current;
    // time complexity: O(1)
  }



}
