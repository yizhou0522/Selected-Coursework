import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}
%%

DIGIT=        [0-9]
SPACE=        [\040\t]
LETTER =      [a-zA-Z]
BACKSLASH =        [\\]
ESCAPECHAR =    [nt'\"\?\\]
STRCHAR =   [^\n\"\\]
BADCHAR =    [^nt'\"\?\\]

ID= ({LETTER}|"_")({DIGIT}|{LETTER}|"_")*
LEGALSTR= [\"]({STRCHAR}|{BACKSLASH}{ESCAPECHAR})*[\"]
UNTERMSTR=  [\"]({STRCHAR}|{BACKSLASH}{ESCAPECHAR})*
BADESCAPE= [\"](({STRCHAR}|{BACKSLASH}{ESCAPECHAR})*{BACKSLASH}{BADCHAR})+({STRCHAR}|{BACKSLASH}{ESCAPECHAR})*[\"]
UNTERMBADESCAPE= [\"](({STRCHAR}|{BACKSLASH}{ESCAPECHAR})*{BACKSLASH}{BADCHAR})+({STRCHAR}|{BACKSLASH}{ESCAPECHAR})*

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%


"bool" {
    Symbol S = new Symbol(sym.BOOL, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"int" {
    Symbol S = new Symbol(sym.INT, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"void" {
    Symbol S = new Symbol(sym.VOID, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"true" {
    Symbol S = new Symbol(sym.TRUE, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"false" {
    Symbol S = new Symbol(sym.FALSE, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"struct" {
    Symbol S = new Symbol(sym.STRUCT, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"cin" {
    Symbol S = new Symbol(sym.CIN, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"cout" {
    Symbol S = new Symbol(sym.COUT, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"if" {
    Symbol S = new Symbol(sym.IF, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"else" {
    Symbol S = new Symbol(sym.ELSE, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"while" {
    Symbol S = new Symbol(sym.WHILE, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"return" {
    Symbol S = new Symbol(sym.RETURN, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

 {ID} {
		 String val = yytext();
			Symbol s = new Symbol(sym.ID, new IdTokenVal(yyline+1,CharNum.num,val));
			CharNum.num += yytext().length();
			return s;
		  }

{DIGIT}+  { // NOTE: the following computation of the integer value does NOT
            //       check for overflow.  This must be modified.
            int val;
            try{
                 val = Integer.parseInt(yytext());
            }
            catch(Exception e){
              val = Integer.MAX_VALUE;
              ErrMsg.warn(yyline + 1, CharNum.num, "integer literal too large; using max value");
            }
            Symbol s = new Symbol(sym.INTLITERAL,
                             new IntLitTokenVal(yyline+1, CharNum.num, val));
            CharNum.num += yytext().length();
            return s;
          }

{LEGALSTR} { 
				String val = yytext();
				Symbol s = new Symbol(sym.STRINGLITERAL, new StrLitTokenVal(yyline+1,CharNum.num,val));
				CharNum.num += yytext().length();
				return s;
			}


{UNTERMSTR} {
				ErrMsg.fatal(yyline+1,CharNum.num,"unterminated string literal ignored");
				CharNum.num = 1;
			}

{BADESCAPE} {
				ErrMsg.fatal(yyline+1,CharNum.num,"string literal with bad escaped character ignored");
				CharNum.num += yytext().length();
			}


{UNTERMBADESCAPE}  {
				ErrMsg.fatal(yyline+1,CharNum.num,"unterminated string literal with bad escaped character ignored");
				CharNum.num = 1;
			}


"{" {
    Symbol S = new Symbol(sym.LCURLY, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"}" {
    Symbol S = new Symbol(sym.RCURLY, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"(" {
    Symbol S = new Symbol(sym.LPAREN, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

")" {
    Symbol S = new Symbol(sym.RPAREN, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}


";" {
    Symbol S = new Symbol(sym.SEMICOLON, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"," {
    Symbol S = new Symbol(sym.COMMA, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"." {
    Symbol S = new Symbol(sym.DOT, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}


"<<" {
    Symbol S = new Symbol(sym.WRITE, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

">>" {
    Symbol S = new Symbol(sym.READ, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"++" {
    Symbol S = new Symbol(sym.PLUSPLUS, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"--" {
    Symbol S = new Symbol(sym.MINUSMINUS, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"+" {
    Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"-" {
    Symbol S = new Symbol(sym.MINUS, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"*" {
    Symbol S = new Symbol(sym.TIMES, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"/" {
    Symbol S = new Symbol(sym.DIVIDE, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}


"!" {
    Symbol S = new Symbol(sym.NOT, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"&&" {
    Symbol S = new Symbol(sym.AND, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}


"||" {
    Symbol S = new Symbol(sym.OR, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"==" {
    Symbol S = new Symbol(sym.EQUALS, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"!=" {
    Symbol S = new Symbol(sym.NOTEQUALS, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}


"<" {
    Symbol S = new Symbol(sym.LESS, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

">" {
    Symbol S = new Symbol(sym.GREATER, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

"<=" {
    Symbol S = new Symbol(sym.LESSEQ, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

">=" {
    Symbol S = new Symbol(sym.GREATEREQ, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}


"=" {
    Symbol S = new Symbol(sym.ASSIGN, new TokenVal(yyline + 1, CharNum.num));
    CharNum.num += yytext().length();
    return S;
}

([/][/]|[#][#]).* {
  
}


\n        { CharNum.num = 1; }

{SPACE}+  { CharNum.num += yytext().length(); }


        
.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
            CharNum.num++;
          }
